// Fork by Evan you
// https://github.com/vuejs/vue-hackernews-2.0/blob/master/build/setup-dev-server.js

const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const chokidar = require('chokidar')
const merge = require('webpack-merge')
const { devMiddleware, hotMiddleware } = require('koa-webpack-middleware')

const readFile = (fs, path) => {
  try {
    return fs.readFileSync(path, 'utf-8')
  } catch (e) {
    console.log(e)
  }
}

module.exports = {
  init: function(server, templatePath, cb) {
    let bundle
    let template
    let clientManifest

    let ready
    const readyPromise = new Promise(r => {
      ready = r
    })
    const update = () => {
      if (bundle && clientManifest) {
        ready()
        cb(bundle, {
          template,
          clientManifest
        })
      }
    }

    // read template from disk and watch
    template = fs.readFileSync(templatePath, 'utf-8')
    chokidar.watch(templatePath).on('change', () => {
      template = fs.readFileSync(templatePath, 'utf-8')
      console.log('index.html template updated.')
      update()
    })

    // modify client config to work with hot middleware
    let clientWebpackConfig = this.resolveWepackConfig('client')
    const mainJs = clientWebpackConfig.entry
    clientWebpackConfig.entry = {}
    clientWebpackConfig.entry.main = ['webpack-hot-middleware/client', mainJs]
    clientWebpackConfig.output.filename = '[name].js'
    clientWebpackConfig.plugins.push(
      new webpack.HotModuleReplacementPlugin(),
      new webpack.NoEmitOnErrorsPlugin()
    )

    // dev middleware
    const clientCompiler = webpack(clientWebpackConfig)
    const devMidware = devMiddleware(clientCompiler, {
      publicPath: clientWebpackConfig.output.publicPath,
      noInfo: true
    })
    clientCompiler.plugin('done', stats => {
      stats = stats.toJson()
      stats.errors.forEach(err => console.error(err))
      stats.warnings.forEach(err => console.warn(err))
      if (stats.errors.length) return
      clientManifest = JSON.parse(
        readFile(
          devMidware.fileSystem,
          path.join(
            clientWebpackConfig.output.path,
            'vue-ssr-client-manifest.json'
          )
        )
      )
      update()
    })
    server.use(devMidware)
    server.use(hotMiddleware(clientCompiler, { heartbeat: 5000 }))

    // read template from disk and watch
    template = fs.readFileSync(templatePath, 'utf-8')
    chokidar.watch(templatePath).on('change', () => {
      template = fs.readFileSync(templatePath, 'utf-8')
      console.log('index.html template updated.')
      update()
    })

    const serverWepackConfig = this.resolveWepackConfig('server')
    const serverComplier = webpack(serverWepackConfig)
    const mfs = new MFS()
    serverComplier.outputFileSystem = mfs
    serverComplier.watch({}, (err, stats) => {
      if (err) throw err
      stats = stats.toJson()
      if (stats.errors.length) return

      // read bundle generated by vue-ssr-webpack-plugin
      bundle = JSON.parse(
        readFile(
          mfs,
          path.join(
            clientWebpackConfig.output.path,
            'vue-ssr-server-bundle.json'
          )
        )
      )

      update()
    })

    return readyPromise
  },
  resolveWepackConfig: function(target) {
    const webpackConfig = require('@vue/cli-service/webpack.config.js')
    const config =
      target === 'server'
        ? require('./vue.webpack.server')
        : require('./vue.webpack.client')
    const merged = merge(webpackConfig, config)

    return merged
  }
}
